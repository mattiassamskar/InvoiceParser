{"version":3,"sources":["ExpensesContainer.tsx","SearchContainer.tsx","ChartContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ExpensesContainer","props","columns","title","dataIndex","key","render","date","react_default","a","createElement","format","row","col","span","className","table","dataSource","expenses","SearchContainer","_useState","useState","_useState2","Object","slicedToArray","filter","setFilter","gutter","type","justify","input","placeholder","value","onChange","text","target","es_button","onClick","fetch","then","result","json","forEach","expense","moment","utc","setExpenses","ChartContainer","expensesByMonth","reduce","b","month","parseInt","amount","options","chart","marginTop","animation","legend","enabled","credits","exporting","tooltip","valueDecimals","xAxis","categories","toConsumableArray","keys","map","yAxis","undefined","labels","series","data","values","y","highcharts_react_min_default","highcharts","Highcharts","App","locale","xs","md","ChartContainer_ChartContainer","SearchContainer_SearchContainer","ExpensesContainer_ExpensesContainer","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23d22f82.chunk.js","sourcesContent":["import React from \"react\";\nimport { Expense } from \"./App\";\nimport { Table, Row, Col } from \"antd\";\nimport moment from \"moment\";\n\ninterface Props {\n  expenses: Expense[];\n}\n\nexport const ExpensesContainer = (props: Props) => {\n  const columns = [\n    {\n      title: \"Datum\",\n      dataIndex: \"date\",\n      key: \"date\",\n      render: (date: moment.Moment) => <div>{date.format(\"YYYY-MM-DD\")}</div>\n    },\n    {\n      title: \"Beskrivning\",\n      dataIndex: \"description\",\n      key: \"description\"\n    },\n    {\n      title: \"Belopp\",\n      dataIndex: \"amount\",\n      key: \"amount\"\n    }\n  ];\n\n  return (\n    <Row>\n      <Col span={24} className=\"container-margin\">\n        <Table dataSource={props.expenses} columns={columns} />\n      </Col>\n    </Row>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Input, Row, Col, Button } from \"antd\";\nimport { Expense } from \"./App\";\nimport moment from \"moment\";\n\ninterface Props {\n  setExpenses: (expenses: Expense[]) => void;\n}\n\nexport const SearchContainer = (props: Props) => {\n  const [filter, setFilter] = useState(\"\");\n\n  const fetchExpenses = () => {\n    fetch(\"/expenses?filter=\" + filter)\n      .then(result => result.json())\n      .then((expenses: Expense[]) => {\n        expenses.forEach(expense => (expense.date = moment.utc(expense.date)));\n        props.setExpenses(expenses);\n      });\n  };\n\n  return (\n    <Row gutter={16} type=\"flex\" justify=\"center\" className=\"container-margin\">\n      <Col span={8}>\n        <Input\n          placeholder=\"Sökord..\"\n          value={filter}\n          onChange={text => setFilter(text.target.value)}\n        />\n      </Col>\n      <Col span={8}>\n        <Button type=\"primary\" onClick={fetchExpenses}>\n          Sök!\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Input, Row, Col, Button } from \"antd\";\nimport { Expense } from \"./App\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport moment from \"moment\";\n\ninterface Props {\n  expenses: Expense[];\n}\n\nexport const ChartContainer = (props: Props) => {\n  const sumExpensesByMonth = () => {\n    return props.expenses.reduce((a: { [key: number]: number }, b) => {\n      const month = parseInt(b.date.format(\"YYYYMM\"));\n      a[month] = a[month] || 0;\n      a[month] = a[month] + b.amount;\n      return a;\n    }, []);\n  };\n\n  const expensesByMonth = sumExpensesByMonth();\n  const categories = [...Object.keys(expensesByMonth)].map(key =>\n    moment.utc(key + \"01\").format(\"MMM YYYY\")\n  );\n  const data = [...Object.values(expensesByMonth)].map(value => {\n    return { y: value };\n  });\n\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"column\",\n      marginTop: 40,\n      animation: false\n    },\n    title: { text: \"\" },\n    legend: { enabled: false },\n    credits: { enabled: false },\n    exporting: { enabled: false },\n    tooltip: { valueDecimals: 2 },\n    xAxis: {\n      type: \"category\",\n      categories\n    },\n    yAxis: {\n      title: undefined,\n      labels: {\n        format: \"{value} kr\"\n      }\n    },\n    series: [\n      {\n        type: \"column\",\n        data\n      }\n    ]\n  };\n\n  return (\n    <Row>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </Row>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport { ExpensesContainer } from \"./ExpensesContainer\";\nimport { SearchContainer } from \"./SearchContainer\";\nimport { Row, Col } from \"antd\";\nimport { ChartContainer } from \"./ChartContainer\";\nimport moment from \"moment\";\nimport \"moment/locale/sv\";\n\nexport interface Expense {\n  id: string;\n  date: moment.Moment;\n  description: string;\n  amount: number;\n}\n\nconst App = () => {\n  moment.locale(\"sv\");\n  const [expenses, setExpenses] = useState<Array<Expense>>([]);\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col xs={0} md={3} />\n        <Col xs={24} md={18}>\n          <ChartContainer expenses={expenses} />\n          <SearchContainer setExpenses={setExpenses} />\n          <ExpensesContainer expenses={expenses} />\n        </Col>\n        <Col xs={0} md={3} />\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}