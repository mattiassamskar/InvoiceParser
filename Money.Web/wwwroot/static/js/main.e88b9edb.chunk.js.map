{"version":3,"sources":["HeaderComponent.tsx","ExpensesContainer.tsx","api.ts","SearchContainer.tsx","ChartContainer.tsx","MainContainer.tsx","EditContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","style","height","paddingLeft","paddingRight","marginBottom","display","justifyContent","alignItems","background","Link","to","color","icon","type","ExpensesContainer","props","columns","title","dataIndex","key","render","date","format","row","col","span","className","table","dataSource","expenses","getExpenses","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","filter","url","result","wrap","_context","prev","next","fetch","sent","json","forEach","expense","moment","utc","abrupt","t0","stop","this","_x","apply","arguments","SearchContainer","_useState","useState","_useState2","slicedToArray","setFilter","_useState3","_useState4","isLoading","setIsLoading","fetchExpenses","setExpenses","justify","input","placeholder","value","onChange","text","target","es_button","loading","onClick","ChartContainer","expensesByMonth","reduce","b","month","parseInt","amount","options","chart","marginTop","animation","legend","enabled","credits","exporting","tooltip","valueDecimals","xAxis","categories","toConsumableArray","keys","map","yAxis","undefined","labels","series","data","values","y","highcharts_react_min_default","highcharts","Highcharts","MainContainer","SearchContainer_SearchContainer","ChartContainer_ChartContainer","ExpensesContainer_ExpensesContainer","EditContainer","editExpenses","setEditExpenses","useEffect","transformExpenses","deleteExpense","_ref2","_callee2","id","_context2","description","askIfDuplicate","notDuplicate","findDuplicates","e","isSame","length","editExpense","spin","size","App","locale","BrowserRouter","xs","md","HeaderComponent_Header","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e88b9edb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Icon } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nexport const Header = () => (\n  <div\n    style={{\n      height: \"60px\",\n      paddingLeft: \"10px\",\n      paddingRight: \"10px\",\n      marginBottom: \"10px\",\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      background: \"#fafafa\"\n    }}\n  >\n    <Link to=\"/\" style={{ color: \"black\" }}>\n      <div>\n        <Icon type=\"home\" /> Ekonomi\n      </div>\n    </Link>\n    <Link to=\"/edit\" style={{ color: \"grey\" }}>\n      Ã„ndra\n    </Link>\n  </div>\n);\n","import React from \"react\";\nimport { Expense } from \"./MainContainer\";\nimport { Table, Row, Col } from \"antd\";\nimport moment from \"moment\";\n\ninterface Props {\n  expenses: Expense[];\n}\n\nexport const ExpensesContainer = (props: Props) => {\n  const columns = [\n    {\n      title: \"Datum\",\n      dataIndex: \"date\",\n      key: \"date\",\n      render: (date: moment.Moment) => <div>{date.format(\"YYYY-MM-DD\")}</div>\n    },\n    {\n      title: \"Beskrivning\",\n      dataIndex: \"description\",\n      key: \"description\"\n    },\n    {\n      title: \"Belopp\",\n      dataIndex: \"amount\",\n      key: \"amount\"\n    }\n  ];\n\n  return (\n    <Row>\n      <Col span={24} className=\"container-margin\">\n        <Table dataSource={props.expenses} columns={columns} />\n      </Col>\n    </Row>\n  );\n};\n","import moment from \"moment\";\nimport { Expense } from \"./MainContainer\";\n\nexport const getExpenses = async (filter?: string) => {\n  try {\n    const url = filter ? \"/expenses?filter=\" + filter : \"/expenses\";\n    const result = await fetch(url);\n    const expenses = (await result.json()) as Expense[];\n    expenses.forEach(expense => (expense.date = moment.utc(expense.date)));\n    return expenses;\n  } catch (error) {\n    return [];\n  }\n};\n\nexport const deleteExpense = async (id: string) => {\n  try {\n    await fetch(\"/expenses?id=\" + id, { method: \"DELETE\" });\n  } catch (error) {}\n};\n","import React, { useState } from \"react\";\nimport { Input, Row, Col, Button } from \"antd\";\nimport { Expense } from \"./MainContainer\";\nimport { getExpenses } from \"./api\";\n\ninterface Props {\n  setExpenses: (expenses: Expense[]) => void;\n}\n\nexport const SearchContainer = (props: Props) => {\n  const [filter, setFilter] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchExpenses = async () => {\n    setIsLoading(true);\n    const expenses = await getExpenses(filter);\n    props.setExpenses(expenses);\n    setIsLoading(false);\n  };\n\n  return (\n    <Row type=\"flex\" justify=\"center\" className=\"container-margin\">\n      <Col span={8}>\n        <Input\n          placeholder=\"SÃ¶kord..\"\n          value={filter}\n          onChange={text => setFilter(text.target.value)}\n        />\n      </Col>\n      <Col span={16}>\n        <Button\n          icon=\"search\"\n          type=\"primary\"\n          loading={isLoading}\n          onClick={fetchExpenses}\n        >\n          SÃ¶k\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import React  from \"react\";\nimport { Row } from \"antd\";\nimport { Expense } from \"./MainContainer\";\nimport * as Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport moment from \"moment\";\n\ninterface Props {\n  expenses: Expense[];\n}\n\nexport const ChartContainer = (props: Props) => {\n  const sumExpensesByMonth = () => {\n    return props.expenses.reduce((a: { [key: number]: number }, b) => {\n      const month = parseInt(b.date.format(\"YYYYMM\"));\n      a[month] = a[month] || 0;\n      a[month] = a[month] + b.amount;\n      return a;\n    }, []);\n  };\n\n  const expensesByMonth = sumExpensesByMonth();\n  const categories = [...Object.keys(expensesByMonth)].map(key =>\n    moment.utc(key + \"01\").format(\"MMM YYYY\")\n  );\n  const data = [...Object.values(expensesByMonth)].map(value => {\n    return { y: value };\n  });\n\n  const options: Highcharts.Options = {\n    chart: {\n      type: \"column\",\n      marginTop: 40,\n      animation: false\n    },\n    title: { text: \"\" },\n    legend: { enabled: false },\n    credits: { enabled: false },\n    exporting: { enabled: false },\n    tooltip: { valueDecimals: 2 },\n    xAxis: {\n      type: \"category\",\n      categories\n    },\n    yAxis: {\n      title: undefined,\n      labels: {\n        format: \"{value} kr\"\n      }\n    },\n    series: [\n      {\n        type: \"column\",\n        data\n      }\n    ]\n  };\n\n  return (\n    <Row>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </Row>\n  );\n};\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { ExpensesContainer } from \"./ExpensesContainer\";\nimport { SearchContainer } from \"./SearchContainer\";\nimport { ChartContainer } from \"./ChartContainer\";\n\nexport interface Expense {\n  id: string;\n  date: moment.Moment;\n  description: string;\n  amount: number;\n  notDuplicate: boolean | null;\n}\n\nexport const MainContainer = () => {\n  const [expenses, setExpenses] = useState<Array<Expense>>([]);\n\n  return (\n    <div>\n      <SearchContainer setExpenses={setExpenses} />\n      <ChartContainer expenses={expenses} />\n      <ExpensesContainer expenses={expenses} />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Expense } from \"./MainContainer\";\nimport { Table, Row, Col, Button, Spin } from \"antd\";\nimport moment from \"moment\";\nimport { getExpenses } from \"./api\";\n\ninterface EditExpense {\n  id: string;\n  date: moment.Moment;\n  description: string;\n  amount: number;\n  askIfDuplicate: boolean;\n}\n\nexport const EditContainer = () => {\n  const [editExpenses, setEditExpenses] = useState<Array<EditExpense>>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []);\n\n  const fetchExpenses = async () => {\n    setIsLoading(true);\n    const expenses = await getExpenses();\n    setEditExpenses(transformExpenses(expenses));\n    setIsLoading(false);\n  };\n\n  const deleteExpense = async (id: string) => {\n    await deleteExpense(id);\n    fetchExpenses();\n  };\n\n  const transformExpenses = (expenses: Expense[]): EditExpense[] => {\n    return expenses.map(expense => {\n      return {\n        id: expense.id,\n        date: moment.utc(expense.date),\n        description: expense.description,\n        amount: expense.amount,\n        askIfDuplicate:\n          expense.notDuplicate !== true && findDuplicates(expense, expenses)\n      } as EditExpense;\n    });\n  };\n\n  const findDuplicates = (expense: Expense, expenses: Expense[]): boolean =>\n    expenses.filter(\n      e =>\n        e.amount === expense.amount &&\n        e.description === expense.description &&\n        e.date.isSame(expense.date)\n    ).length > 1;\n\n  const columns = [\n    {\n      title: \"Datum\",\n      dataIndex: \"date\",\n      key: \"date\",\n      render: (date: moment.Moment) => <div>{date.format(\"YYYY-MM-DD\")}</div>\n    },\n    {\n      title: \"Beskrivning\",\n      dataIndex: \"description\",\n      key: \"description\"\n    },\n    {\n      title: \"Belopp\",\n      dataIndex: \"amount\",\n      key: \"amount\"\n    },\n    {\n      title: \"Dublett\",\n      dataIndex: \"askIfDuplicate\",\n      key: \"askIfDuplicate\",\n      render: (askIfDuplicate: boolean, editExpense: EditExpense) => {\n        return askIfDuplicate === true ? (\n          <Button onClick={() => deleteExpense(editExpense.id)}>Ta bort</Button>\n        ) : (\n          undefined\n        );\n      }\n    }\n  ];\n\n  return (\n    <Row>\n      <Col span={24} className=\"container-margin\">\n        {isLoading ? (\n          <Spin size=\"large\" />\n        ) : (\n          <Table dataSource={editExpenses} columns={columns} />\n        )}\n      </Col>\n    </Row>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { Row, Col } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { Header } from \"./HeaderComponent\";\nimport { MainContainer } from \"./MainContainer\";\nimport { EditContainer } from \"./EditContainer\";\nimport moment from \"moment\";\nimport \"moment/locale/sv\";\n\nconst App = () => {\n  moment.locale(\"sv\");\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Row>\n          <Col xs={0} md={3} />\n          <Col xs={24} md={18}>\n            <Header />\n            <Route path=\"/\" exact component={MainContainer} />\n            <Route path=\"/edit\" component={EditContainer} />\n          </Col>\n          <Col xs={0} md={3} />\n        </Row>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}